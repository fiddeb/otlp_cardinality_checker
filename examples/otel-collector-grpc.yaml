# OpenTelemetry Collector Configuration
# This example shows how to configure the Collector to send telemetry
# to the OTLP Cardinality Checker via gRPC

receivers:
  # Prometheus receiver - scrapes metrics from Prometheus endpoints
  prometheus:
    config:
      scrape_configs:
        - job_name: 'my-app'
          scrape_interval: 30s
          static_configs:
            - targets: ['localhost:8081']
  
  # OTLP receiver - receives telemetry from applications
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

  # Kafka receiver - consumes metrics from Kafka
  kafka:
    protocol_version: 2.0.0
    brokers:
      - localhost:9092
    topic: metrics
    encoding: otlp_proto

processors:
  # Batch processor - batches telemetry before export
  batch:
    timeout: 10s
    send_batch_size: 1024

  # Memory limiter - prevents OOM
  memory_limiter:
    check_interval: 1s
    limit_mib: 512

exporters:
  # Export to OTLP Cardinality Checker via gRPC
  otlp/cardinality-checker:
    endpoint: localhost:4317
    tls:
      insecure: true
    compression: gzip
    timeout: 30s
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s

  # Optional: Also export to another backend
  otlp/production:
    endpoint: production-backend:4317
    tls:
      insecure: false
      cert_file: /etc/otel/cert.pem
      key_file: /etc/otel/key.pem

service:
  pipelines:
    metrics:
      receivers: [prometheus, otlp, kafka]
      processors: [memory_limiter, batch]
      exporters: [otlp/cardinality-checker, otlp/production]
    
    traces:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [otlp/cardinality-checker, otlp/production]
    
    logs:
      receivers: [otlp]
      processors: [memory_limiter, batch]
      exporters: [otlp/cardinality-checker, otlp/production]
